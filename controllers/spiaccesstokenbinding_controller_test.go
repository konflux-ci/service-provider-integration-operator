//
// Copyright (c) 2021 Red Hat, Inc.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package controllers

import (
	"testing"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/utils/pointer"

	"github.com/google/go-cmp/cmp"
	"github.com/redhat-appstudio/service-provider-integration-operator/pkg/spi-shared/config"
	"github.com/stretchr/testify/assert"
	corev1 "k8s.io/api/core/v1"
)

func TestValidateServiceProviderUrl(t *testing.T) {
	assert.ErrorIs(t, validateServiceProviderUrl("https://foo."), invalidServiceProviderHostError)
	assert.ErrorIs(t, validateServiceProviderUrl("https://Ca$$h.com"), invalidServiceProviderHostError)

	assert.ErrorContains(t, validateServiceProviderUrl("://invalid"), "not parsable")
	assert.ErrorContains(t, validateServiceProviderUrl("https://rick:mory"), "not parsable")

	assert.NoError(t, validateServiceProviderUrl(config.ServiceProviderTypeGitHub.DefaultBaseUrl))
	assert.NoError(t, validateServiceProviderUrl(config.ServiceProviderTypeQuay.DefaultBaseUrl))
	assert.NoError(t, validateServiceProviderUrl("http://random.ogre"))
}

func TestServiceAccountSecretComparator(t *testing.T) {
	cases := []struct {
		name  string
		equal bool
		a     *corev1.Secret
		b     *corev1.Secret
	}{
		{
			name:  "empty_secrets",
			equal: true,
			a:     &corev1.Secret{},
			b:     &corev1.Secret{},
		},
		{
			name:  "labels_ignored",
			equal: true,
			a:     &corev1.Secret{},
			b: &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{"a": "b"},
				},
			},
		},
		{
			name:  "annotations_ignored",
			equal: true,
			a:     &corev1.Secret{},
			b: &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Annotations: map[string]string{"a": "b"},
				},
			},
		},
		{
			name:  "autogenerated_data_fields_ignored",
			equal: true,
			a:     &corev1.Secret{},
			b: &corev1.Secret{
				Data: map[string][]byte{
					"ca.crt":    []byte("cert"),
					"namespace": []byte("ns"),
					"token":     []byte("token"),
				},
			},
		},
		{
			name:  "immutable_not_ignored",
			equal: false,
			a:     &corev1.Secret{},
			b: &corev1.Secret{
				Immutable: pointer.Bool(false),
			},
		},
		{
			name:  "other_data_fields_not_ignored",
			equal: false,
			a:     &corev1.Secret{},
			b: &corev1.Secret{
				Data: map[string][]byte{
					"extra": []byte("value"),
				},
			},
		},
	}

	for _, c := range cases {
		t.Run(c.name, func(t *testing.T) {
			res := cmp.Equal(*c.a, *c.b, serviceAccountSecretDiffOpts)

			if c.equal {
				assert.True(t, res, cmp.Diff(*c.a, *c.b, serviceAccountSecretDiffOpts))
			} else {
				assert.False(t, res, cmp.Diff(*c.a, *c.b, serviceAccountSecretDiffOpts))
			}
		})
	}
}
